#!/usr/local/bin/python3

from Crypto.Util.number import *
from math import isqrt, gcd
from primefac import multifactor, primefac

# flag = bytes_to_long(open('flag.txt', 'rb').read())
# p, q = getPrime(1024), getPrime(1024)
# N = p * q
# e = getPrime(64)
# d = pow(e, -1, N - p - q + 1)

# encrypted_flag = pow(flag, e, N)
# print(f"{encrypted_flag = }")

# try:
#     for i in range(10):
#         c = int(input("message? "))
#         if isqrt(N) < c < N:
#             if c == encrypted_flag or c == (N - encrypted_flag):
#                 print("sorry, that looks like the flag")
#                 continue
#             print(hex(pow(c, d, N))[2:])
#         else:
#             print("please pick a number which I can (easily) check does not look like the flag.")
# except:
#     exit()
# print("ok bye")
from pwn import *

# while True:
#     r = remote("chal.amt.rs", 1417)
#
#     encrypted_flag = r.recvline()
#     print(encrypted_flag)
#     encrypted_flag = int(encrypted_flag.decode()[:-1].split("encrypted_flag = ")[1])
#     print(encrypted_flag)
#
#     num_arr = [2, 3, 4, 6, 5, 10]
#     arr = []
#     count = 0
#     for i in num_arr:
#         r.recvuntil(b"message? ")
#         r.sendline(str(i * encrypted_flag).encode())
#
#         data = r.recvline()
#         if b"please pick a number which I can (easily) check does not look like the flag." in data:
#             break
#         arr.append(int(data.decode(), 16))
#         count += 1
#
#     if len(arr) == 6:
#         a = arr[0] * arr[3] - arr[1] * arr[2]
#         b = arr[0] * arr[5] - arr[2] * arr[4]
#         n = gcd(a, b)
#         print(n)
#         print(arr)
#         break
#     else:
#         print("Failed")
#         r.close()

encrypted_flag = 528334159665177808661842192607356606662295052659948374300516196300780645737408626783601512190532819740992608483956397751281259789915276051007752213006104604577528841890562407818174158351682689797007537898699108736520516925776786535604653093552967637385030398526322134040020484306714685402312715226160238724250910956258427775289691681075563680132234048893635565419605741602707683848702084972068849749150959596095723842345621470803695186353113280982185274475305799760765571869224461940115127851315970377623968910178314121243499195251099226917509854889673787606820023497188971458313371282385912512377828957187211759849
arr = [8468209618625032325234193001585891605383127900965255805255243383878752752238617718787056342161789917302579924233871712230051181861554758366107456070034405522331225603045485996753523742587621074753388414748718091034734773319240622426360679842912735203958053144726037884712351033727796746891542606517333925879332013332186170255688308366382113291044481125994405484079566675236509984509406350131940745250178725947755196118545879674552146903596479574051628422924024697854240165443792669691492749425444989455211692998501199862585775191781234125519998525046029269998605349124247431201653420990130833948259826933912519713175, 138741967097840336642079548481856061124585574707947585143255593329616399501805190338285962561347505800721301001603697764496913036034726132782532141189389488672085894802262114293934786326119183327670552996909903409891947463717133245345802710080504784997590043669202719872894937917423817996081091690035308222641514194020179946753553326947504962942881048980799453248916532949745647847809518138207150770236461693190661910510496164857638514247219110825197367223428749950542072906405436923398985200728822072142160188498165323673280534611998556484648735004002835543911626181101659645667455941099113607409029354985972569865, 4320234195931973293004171769492179866367382261215973361105941043632711699530053724817829748405916017491279475427371914214260220681177386604088551672873142865457615629139449158972225137697817077209207363149582674220155417164401287457776439523043559478362854226472686098135252244545294906130155724500368898594518576982499955073862313765177513409895298662265115017635670359450344296206192984260146157338252490540721552153043284421985350297958476943560317970032046856645973340100986274803111180758302573390114022366793379380194961110087003296339348674085607031274733074576368374635251674901084933612280689735153580992170, 1649979754186528173873766066627455610464778364717703220712778112038218237921392295382114377110736435080307016433190266012351653850015210226311467594937464593090461474832943895522250339135076640010865634487644227633314061988303806886807965688442530993553691918077664247207167012710246684397457884064478761133235563540243263609548854374838842343060645359894676417857347749923948884765202278891916704247776798544614175607240974227541258294455701373914502401611964144522631403469255395345256510166546544422352528020638268045042848378086030151049869154025795294187085407889840630440927476825894510209954585263765772144354, 4070648421934609923776668268000799637597541118971064046755664815293435317134122730252441397917219978993345373502019571108208618518009965156100359047599535662704400014733873184867790372081734946961978649213700197417464782526124090547782265107819441706265898225603199194793250811778855469089353029659630073252950644502781387537001756137139352718451455380892676912545748844046675270596874541676356680850014920334705117039681384394587931636174076082337706967785886885682888152789375005150480410153240864556327228871902047871246351797773681500423825392091959727410914977383722598951871235250878555326272522623480016900685, 14910316476455922517092303805605795099449396314173970255829962095927065089391004392325974706034665841077507081279397381469575823259638810044585291240690900577429969154171684121920132739450636885664500263864688536911536761968485676317833133612696694600745122543083787762263945871237326580865369886016736235340674445645731316675253903220661553598512723097557413447998381873979732851574645936857092554498856330109495906772783631605626178420486449338627622376149325574583932620257319775884094619202200271564059944587428837415065609854263236465976047795803463353237370153623440365236165226002212474193672626661787365741281]
n = 15164242013395390878600127555372294749383692681316938405854430974401176607553342038812599712601305176704761609218294746059074444167887366099315351871957495869887436098785564941976275744017925985506689949196309914287954857267799134072071120556741323079942859022929803899797683986762183349860036930363351696936533215009764520563145720941041026783198223086941314594125510124014789745403427770369493242128145009012656794877415668015103898043128734212928435266101945922324485531551992692444461357986183869700045914251121262613310277381946679392199052398805531572956690292735647488459203982156347107253131457722057947715679
print(n.bit_length())
m = arr[0] * arr[0] * inverse(arr[2], n) % n
print(long_to_bytes(m))
