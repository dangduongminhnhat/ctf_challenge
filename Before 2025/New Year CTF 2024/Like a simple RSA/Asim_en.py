from random import randint
from Crypto.Util.number import inverse, long_to_bytes

def gen_key():

    a, b, c, d = randint(3 * 64), randint(4 * 64), randint(5 * 64), randint(6 * 64)

    e = a * b - 1
    f = c * e + a + e
    g = d * e + b * f
    h = c * d * e + a * d + c * b + g * g

    public_key = (h, f)
    private_key = g
    key = (public_key, private_key)

    return key

def encrypt(m, public_key):
    c = (m * public_key[1]) % public_key[0]
    return c

def decrypt(c, public_key, private_key):
    m = (c * private_key) % public_key[0]
    return m


h = 8470387347298476177456807592234800305223146039241805029722152502623609066137655800632000167660507958129073278126249206662322559690599099900670113252751054479281818630329178438136876189437058031446326100810231155131782952040600724

f = 6416887830534433629567050229667684734973282397714251811755752025377169146409477365161229363756766441347368380751372023179641944107478195964183801916988232697767349642657617

C =  4501577816736015596060497850546201260925821617971707200151522683849342994222685636584343269899367495933875369681542486925080096048706520947165012158736670485935607004216130611982263313862618848808033812929735326651289123228929207

m = (C * inverse(f, h)) % h
m = long_to_bytes(m)
flag = bytes(reversed(m))
print(flag)
